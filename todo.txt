HIGH (WASM)
core wallet should auto save wallet if path given
wallet2 password is required to create valid cache file on creation
wallet core tests
core wallet sync progress notifications
override startSyncing() in MoneroWalletCore.js
MoneroWalletWebWorker.js for web apps
port ground truth comparison tests from java
monero_wallet_core get_keys_file_buffer/get_cache_file_buffer use m_password instead of arg
port pool relay tests from java TestMoneroWalletCommon.java
port testSyncWithPoolSubmit from java
test in-memory wallets
http_client_wasm factor common js
hardcode block hash instead of miner::find_nonce
overload create_wallet_* instead of http_client=null?
monero_wallet_core::set_daemon_connection is_local_address() uses common/util which requires libunbound
remove dummy methods
cleanup core changes
update to latest core
test latest branch with java
nginx monerod to support firefox
update instructions to run library in browser
update screenshots for wasm
compare sync performance with multithreading vs singlethreading - build both?
compare sync performance with emscripten_fetch
what in upstream core causes json_rpc requests to be POST? submit issue to default to POST in http_abstract_invoke and wallet2.h
pre-compress wasm file so server is not compressing when requested: https://emscripten.org/docs/compiling/WebAssembly.html?highlight=wasm
optimize asyncify, see https://kripken.github.io/blog/wasm/2019/07/16/asyncify.html
decref 0 warnings
optimize wasm imports to minimize size
update readme sample with MoneroUtils
submit core pr

libsodium dependency in monero-cpp-library, why doesn't monero-project's work?
test "Can get transactions by id" passes tx query where txs is array of characters
C++ MTRACE statements execute argument which could be major performance hit
mymonero monero_wallet_utils.cpp 182 mnemonic sanitation
emscripten bind can return native vectors, see https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html

remove support for {} and use pure OO?
jni compare ground truth test sometimes shows gt output not unlocked but jni is unlocked
drop support for {} params and use OO only?
release node module
query subaddresses in local wallet
pruning
mms
re-enable prove reserves in account when fixed
getBlocksByRange() end should be exclusive
model rct_signatures and rct_prunable
what happens if sweep_all is not given account_index.  if it sweeps wallet, replace sweepWallet() impl
bundle up dependencies into a single monero.js
test filtering on hasDestinations
MoneroTxTestConfig extends MoneroTxFilter
MoneroTxConfig setIncludeVouts(), getIncludeVouts()
MoneroTxConfig isCompatible(MoneroWalletTx)
wallet.getTxById() for convenience?
commonTxSets
monero.common package which is where MoneroUtils, MoneroException go
sendSingle() : MoneroTx, send() : List<MoneroTx> ?
send priority has no default, must pick one
wallet.close() is common?
MoneroSyncResult received_money -> received_amount for consistency
don't differentiate in spec uint vs long, BigInteger? or specify detailed types (uint64)
class diagram query txs, transfers, vouts
checkTxProof(signature, ...)?
consider how api should generate subaddresses client side
one call per get/set bandwidth limits?
daemon.getBlocksById(), default implementations
daemon test failed txs more
wallet test coinbase txs
sweep subaddresses test
test that note is set if specified in send config
set subaddress getUnspentOutputCount() with outputs assigned
validate all input parameters to api
test every block of the chain
not directly testing sweepUnlocked()
daemon binary tests
daemon notification test needs to test tx merging
merge asserts type
how to handle 'confirmations' block height to add the tx to the chain if unconfirmed? corallary of unlock time?
handle excess undefineds and enable deepEqual() in testWalletTxCopy()
way to throttle rpc requests with agent instead of throttle-request to preserve stacktrace?
send to multiple, suggested_confirmation_threshold outgoing payment 6 but incoming payments 1; large discrepency
remove text-encoding dependency
test notifications hardwired to account 0 which gets emptied by reset tests
test all tx fields in daemon, update tests to be like wallet
test json serialization / deserialization specifically, stringifying in between so cannot be any live objects
support vout filter in tx filter?
undefined amounts instead of 0 for rct amounts
block comments in models
support setting daemon log level
split BooleanSet into new project

JS now has native BigInt class which could be used instead of current BigInteger
switch to jest?
csv export of types
time profiling
mock response test framework
refactor copying to not be downward of a tree rooted at tx but instead correct per each part of a graph
add typescript?

BIG PICTURE
support core wallet with webassembly
report rpc issues
fix transfers bug #4500 in wallet rpc
integrate with bisq
port javascript to go & implement binding to integrate with openbazaar
mymonero javascript wallet

RPC
-1: Failed to get the right transaction from daemon
-4: failed to get output distribution on send rests (wallet rpc transfer, transfer_split, sweep, sweep_single, etc)
-4: Change address is not ours on testSweepUnlocked();
why is subaddr_indices list of map?
subaddresses occluded by outgoing counterparts when sent from/to same account (#4500)
key proof indicates no funds received despite known incoming transfer from/to same account
not enough money right after opening wallet, pretty much every other run
outgoing transfers always return subaddress index 0 (#5171)
duplicate outgoing transfers returned for different subaddress indices, way to include subaddress indices?

add relayed to daemon rpc get_transactions, wallet rpc get_transfers, else must use get_transaction_pool (#5137)
add output_indices to get_blocks_by_height.bin (#5127)
wallet rpc sweep_single documentation not correct; contradicts example
daemon rpc supports cors wildcard character (#5172)
unconfirmed tx missing destinations even though known by wallet
send from/to same account, after first confirmation outgoing tx amount is 0 but has payments with amts, so discrepency
show_transfers returns unconfirmed outputs
introduce way to identify change output from blockchain? that solves unknown sent amt issue
identify one call per acount/subaddress and support "all" flag
/get_transactions returns duplicate data per transaction
daemon get_txs prune documentation missing
document alt chain `block_hashes` and `main_chain_parent_block`
each call to `open_wallet` toggles whether or not pending transfers return (#5106)
transfer with do_not_relay then relay_tx issue (#5107)
ability to create new wallet which randomly generates seed?